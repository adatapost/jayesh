Repeater
============================================================
 
Repeater has limited "templates" -- Header, Footer, Item, Alternate and "Seperator".

Ex:

1. Add Repeater1.

2. Change Markup (Source)

       <asp:Repeater ID="Repeater1" runat="server">
            <HeaderTemplate>
                <h3>List of Departments</h3>
                <ul>
            </HeaderTemplate>
            <FooterTemplate>
                </ul>
            </FooterTemplate>
            <ItemTemplate>
                <li><%#Eval("DeptName") %></li>
            </ItemTemplate>
            <SeparatorTemplate>
                <hr />
            </SeparatorTemplate>
        </asp:Repeater>
3. Bind the data source.

 EmpDbEntities db = new EmpDbEntities();

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            Repeater1.DataSource = db.Depts.ToList();
            Repeater1.DataBind();
        }
    }


DataList
===============================================================
The DataList is introduced in ASP.NET since ver 1.1 and it is repeater like features except "EditTemplate".


1. Add DataList1
2. Design "ItemTemplate","AlternateItem","EditTemplate"
3. Handle EditCommand event.

 EmpDbEntities db = new EmpDbEntities();
    protected void Page_Load(object sender, EventArgs e)
    {

        if (!IsPostBack)
        {
            DataList1.DataSource = db.Depts.ToList();
            DataList1.DataBind();
        }

    }
    protected void DataList1_EditCommand(object source, DataListCommandEventArgs e)
    {
        DataList1.EditItemIndex = e.Item.ItemIndex;
        DataList1.DataSource = db.Depts.ToList();
        DataList1.DataBind();
    }

4. HAndle UpdateCommand event

protected void DataList1_UpdateCommand(object source, DataListCommandEventArgs e)
    {
        TextBox txtId =  DataList1.Items[e.Item.ItemIndex].FindControl("TextBox1") as TextBox;
        TextBox txtName = DataList1.Items[e.Item.ItemIndex].FindControl("TextBox2") as TextBox;
      int id  = int.Parse(txtId.Text);
      var search = db.Depts.Where(x => x.DeptID == id).FirstOrDefault();
      search.DeptName = txtName.Text;
      db.SaveChanges();

      DataList1.EditItemIndex =-1;
      DataList1.DataSource = db.Depts.ToList();
      DataList1.DataBind();
    }

5. Handle DeleteCommand event

 protected void DataList1_DeleteCommand(object source, DataListCommandEventArgs e)
    {
        Label txtId = DataList1.Items[e.Item.ItemIndex].FindControl("Label1") as Label;
        int id = int.Parse(txtId.Text);

        var search = db.Depts.Where(x => x.DeptID == id).FirstOrDefault();
        if (search != null)
        {
            db.Depts.Remove(search);
            db.SaveChanges();
            DataList1.DataSource = db.Depts.ToList();
            DataList1.DataBind();
        }
    }


Display Data horizonally or vertically
============================================

1. Set DataList1.RepeatColumns = 3
2. Set DataList1.RepeatDirection = "Hor | ver"

